// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SmallStore.German.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Korrektes Runden")]
    public partial class KorrektesRundenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "KorrektesRunden.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-CH"), "Korrektes Runden", "\tDamit jeder erhält was er verdient, muss korrekt auf \r\n\tden nächsten 0.5er Schri" +
                    "tt gerundet werden.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Werte werden korrekt gerundet")]
        [NUnit.Framework.TestCaseAttribute("1.1", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.2", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.24", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.25", "1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.26", "1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.5", "1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.51", "1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.6", "1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.74", "1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.75", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "2", new string[0])]
        public virtual void WerteWerdenKorrektGerundet(string credits, string gerundeteCredits, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Werte werden korrekt gerundet", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When(string.Format("der Eintrag {0} hat", credits), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 9
 testRunner.Then(string.Format("wird {0} angezeigt", gerundeteCredits), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
